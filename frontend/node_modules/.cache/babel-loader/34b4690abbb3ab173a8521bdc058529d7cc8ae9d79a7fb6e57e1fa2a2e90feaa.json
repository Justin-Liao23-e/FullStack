{"ast":null,"code":"var _jsxFileName = \"/Users/justin-liao/CS Projects/FullStack/frontend/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport request from '../services/api';\nimport PostForm from './PostForm';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  // Store the user's posts\n  const [posts, setPosts] = useState([]);\n  // Track which post is being edited (by ID)\n  const [editingPost, setEditingPost] = useState(null);\n\n  // Fetch posts on component mount\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  // GET the current user's posts\n  const fetchPosts = async () => {\n    try {\n      const response = await request('/posts/');\n      if (response.ok) {\n        const data = await response.json();\n        setPosts(data);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Create a new post\n  const handleCreatePost = async (title, description) => {\n    try {\n      const response = await request('/posts/', 'POST', {\n        title,\n        description\n      });\n      if (response.ok) {\n        // Refresh the posts list\n        fetchPosts();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Update an existing post\n  const handleUpdatePost = async (postId, updatedTitle, updatedDescription) => {\n    try {\n      const response = await request(`/posts/${postId}/`, 'PUT', {\n        title: updatedTitle,\n        description: updatedDescription\n      });\n      if (response.ok) {\n        fetchPosts();\n        setEditingPost(null);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Delete a post\n  const handleDeletePost = async postId => {\n    // Confirm with the user\n    if (!window.confirm('Are you sure you want to delete this post?')) return;\n    try {\n      const response = await request(`/posts/${postId}/`, 'DELETE');\n      if (response.ok) {\n        fetchPosts();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostForm, {\n      onSubmit: handleCreatePost,\n      buttonLabel: \"Create Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem',\n        border: '1px solid #ccc',\n        padding: '1rem'\n      },\n      children: editingPost === post.id ?\n      /*#__PURE__*/\n      // If we're editing this post, show the form with existing data\n      _jsxDEV(PostForm, {\n        initialTitle: post.title,\n        initialDescription: post.description,\n        onSubmit: (title, description) => handleUpdatePost(post.id, title, description),\n        buttonLabel: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setEditingPost(post.id),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeletePost(post.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"qp5yy/dLh6ZObOob12Vdsoj+1Q8=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","request","PostForm","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","posts","setPosts","editingPost","setEditingPost","fetchPosts","response","ok","data","json","error","console","handleCreatePost","title","description","handleUpdatePost","postId","updatedTitle","updatedDescription","handleDeletePost","window","confirm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","buttonLabel","length","map","post","style","marginTop","border","padding","id","initialTitle","initialDescription","onClick","_c","$RefreshReg$"],"sources":["/Users/justin-liao/CS Projects/FullStack/frontend/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport request from '../services/api';\nimport PostForm from './PostForm';\n\nfunction Home() {\n  // Store the user's posts\n  const [posts, setPosts] = useState([]);\n  // Track which post is being edited (by ID)\n  const [editingPost, setEditingPost] = useState(null);\n\n  // Fetch posts on component mount\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  // GET the current user's posts\n  const fetchPosts = async () => {\n    try {\n      const response = await request('/posts/');\n      if (response.ok) {\n        const data = await response.json();\n        setPosts(data);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Create a new post\n  const handleCreatePost = async (title, description) => {\n    try {\n      const response = await request('/posts/', 'POST', { title, description });\n      if (response.ok) {\n        // Refresh the posts list\n        fetchPosts();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Update an existing post\n  const handleUpdatePost = async (postId, updatedTitle, updatedDescription) => {\n    try {\n      const response = await request(`/posts/${postId}/`, 'PUT', {\n        title: updatedTitle,\n        description: updatedDescription\n      });\n      if (response.ok) {\n        fetchPosts();\n        setEditingPost(null);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Delete a post\n  const handleDeletePost = async (postId) => {\n    // Confirm with the user\n    if (!window.confirm('Are you sure you want to delete this post?')) return;\n    try {\n      const response = await request(`/posts/${postId}/`, 'DELETE');\n      if (response.ok) {\n        fetchPosts();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>My Posts</h2>\n      {/* Form to create new posts */}\n      <PostForm onSubmit={handleCreatePost} buttonLabel=\"Create Post\" />\n\n      {/* Show list of posts */}\n      {posts.length > 0 ? (\n        posts.map((post) => (\n          <div \n            key={post.id} \n            style={{ marginTop: '1rem', border: '1px solid #ccc', padding: '1rem' }}\n          >\n            {editingPost === post.id ? (\n              // If we're editing this post, show the form with existing data\n              <PostForm\n                initialTitle={post.title}\n                initialDescription={post.description}\n                onSubmit={(title, description) => handleUpdatePost(post.id, title, description)}\n                buttonLabel=\"Save Changes\"\n              />\n            ) : (\n              <>\n                <h3>{post.title}</h3>\n                <p>{post.description}</p>\n                {/* If the backend is set up for image, we could show post.image here */}\n                <button onClick={() => setEditingPost(post.id)}>Edit</button>\n                <button onClick={() => handleDeletePost(post.id)}>Delete</button>\n              </>\n            )}\n          </div>\n        ))\n      ) : (\n        <p>No posts yet</p>\n      )}\n    </div>\n  );\n}\n\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}