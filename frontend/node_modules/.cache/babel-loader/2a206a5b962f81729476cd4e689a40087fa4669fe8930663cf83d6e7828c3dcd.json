{"ast":null,"code":"// The base URL for the Django backend\nconst BASE_URL = \"http://127.0.0.1:8000/api\";\n\n/*\n  request():\n   - endpoint: string (e.g. \"/register/\")\n   - method: HTTP method (\"GET\", \"POST\", \"PUT\", \"DELETE\")\n   - body: data to send in JSON form\n   - returns: the raw fetch() response object\n*/\nconst request = async (endpoint, method = \"GET\", body = null) => {\n  // Function to get CSRF token from cookies\n  const getCsrfToken = () => {\n    const cookieValue = document.cookie.split('; ').find(row => row.startsWith('csrftoken='));\n    return cookieValue ? cookieValue.split('=')[1] : '';\n  };\n  const options = {\n    method: method,\n    credentials: \"include\",\n    // Send cookies for session-based auth\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  // Add CSRF token for non-GET requests\n  if (method !== \"GET\") {\n    options.headers[\"X-CSRFToken\"] = getCsrfToken();\n  }\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n  try {\n    // Make the fetch call to Django\n    const response = await fetch(`${BASE_URL}${endpoint}`, options);\n    return response;\n  } catch (error) {\n    console.error(\"API request error:\", error);\n    throw error;\n  }\n};\nexport default request;","map":{"version":3,"names":["BASE_URL","request","endpoint","method","body","getCsrfToken","cookieValue","document","cookie","split","find","row","startsWith","options","credentials","headers","JSON","stringify","response","fetch","error","console"],"sources":["/Users/justin-liao/CS Projects/FullStack/frontend/src/services/api.js"],"sourcesContent":["// The base URL for the Django backend\nconst BASE_URL = \"http://127.0.0.1:8000/api\";\n\n/*\n  request():\n   - endpoint: string (e.g. \"/register/\")\n   - method: HTTP method (\"GET\", \"POST\", \"PUT\", \"DELETE\")\n   - body: data to send in JSON form\n   - returns: the raw fetch() response object\n*/\nconst request = async (endpoint, method = \"GET\", body = null) => {\n  // Function to get CSRF token from cookies\n  const getCsrfToken = () => {\n    const cookieValue = document.cookie\n      .split('; ')\n      .find(row => row.startsWith('csrftoken='));\n    return cookieValue ? cookieValue.split('=')[1] : '';\n  };\n\n  const options = {\n    method: method,\n    credentials: \"include\", // Send cookies for session-based auth\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // Add CSRF token for non-GET requests\n  if (method !== \"GET\") {\n    options.headers[\"X-CSRFToken\"] = getCsrfToken();\n  }\n\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n\n  try {\n    // Make the fetch call to Django\n    const response = await fetch(`${BASE_URL}${endpoint}`, options);\n    return response;\n  } catch (error) {\n    console.error(\"API request error:\", error);\n    throw error;\n  }\n};\n\nexport default request;"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,2BAA2B;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,KAAK;EAC/D;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,WAAW,GAAGC,QAAQ,CAACC,MAAM,CAChCC,KAAK,CAAC,IAAI,CAAC,CACXC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,YAAY,CAAC,CAAC;IAC5C,OAAON,WAAW,GAAGA,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;EACrD,CAAC;EAED,MAAMI,OAAO,GAAG;IACdV,MAAM,EAAEA,MAAM;IACdW,WAAW,EAAE,SAAS;IAAE;IACxBC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;;EAED;EACA,IAAIZ,MAAM,KAAK,KAAK,EAAE;IACpBU,OAAO,CAACE,OAAO,CAAC,aAAa,CAAC,GAAGV,YAAY,CAAC,CAAC;EACjD;EAEA,IAAID,IAAI,EAAE;IACRS,OAAO,CAACT,IAAI,GAAGY,IAAI,CAACC,SAAS,CAACb,IAAI,CAAC;EACrC;EAEA,IAAI;IACF;IACA,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGnB,QAAQ,GAAGE,QAAQ,EAAE,EAAEW,OAAO,CAAC;IAC/D,OAAOK,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAenB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}