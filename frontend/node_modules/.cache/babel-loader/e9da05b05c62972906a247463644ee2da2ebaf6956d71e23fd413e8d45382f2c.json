{"ast":null,"code":"// The base URL for the Django backend\nconst BASE_URL = \"http://127.0.0.1:8000/api\";\n\n/*\n  request():\n   - endpoint: string (e.g. \"/register/\")\n   - method: HTTP method (\"GET\", \"POST\", \"PUT\", \"DELETE\")\n   - body: data to send in JSON form\n   - returns: the raw fetch() response object\n*/\nconst request = async (endpoint, method = \"GET\", body = null) => {\n  const options = {\n    method: method,\n    credentials: \"include\",\n    // Send cookies for session-based auth\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n\n  // Make the fetch call to Django\n  const response = await fetch(`${BASE_URL}${endpoint}`, options);\n  return response;\n};\nexport default request;\n\n/* Make sure your fetch request includes these options\nexport const register = async (userData) => {\n  const response = await fetch('http://127.0.0.1:8000/api/register/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include', // This is important for cookies\n    body: JSON.stringify(userData),\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Registration failed');\n  }\n  \n  return response.json();\n};*/","map":{"version":3,"names":["BASE_URL","request","endpoint","method","body","options","credentials","headers","JSON","stringify","response","fetch"],"sources":["/Users/justin-liao/CS Projects/FullStack/frontend/src/services/api.js"],"sourcesContent":["// The base URL for the Django backend\nconst BASE_URL = \"http://127.0.0.1:8000/api\";\n\n/*\n  request():\n   - endpoint: string (e.g. \"/register/\")\n   - method: HTTP method (\"GET\", \"POST\", \"PUT\", \"DELETE\")\n   - body: data to send in JSON form\n   - returns: the raw fetch() response object\n*/\nconst request = async (endpoint, method = \"GET\", body = null) => {\n  const options = {\n    method: method,\n    credentials: \"include\", // Send cookies for session-based auth\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n\n  // Make the fetch call to Django\n  const response = await fetch(`${BASE_URL}${endpoint}`, options);\n  return response;\n};\n\nexport default request;\n\n/* Make sure your fetch request includes these options\nexport const register = async (userData) => {\n  const response = await fetch('http://127.0.0.1:8000/api/register/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include', // This is important for cookies\n    body: JSON.stringify(userData),\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Registration failed');\n  }\n  \n  return response.json();\n};*/"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,2BAA2B;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,KAAK;EAC/D,MAAMC,OAAO,GAAG;IACdF,MAAM,EAAEA,MAAM;IACdG,WAAW,EAAE,SAAS;IAAE;IACxBC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EACD,IAAIH,IAAI,EAAE;IACRC,OAAO,CAACD,IAAI,GAAGI,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC;EACrC;;EAEA;EACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,QAAQ,GAAGE,QAAQ,EAAE,EAAEG,OAAO,CAAC;EAC/D,OAAOK,QAAQ;AACjB,CAAC;AAED,eAAeT,OAAO;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}